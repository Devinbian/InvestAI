import { ref, nextTick } from "vue";
import { ElMessage } from "element-plus";
import { useChatHistoryStore } from "../store/chatHistory";
import { authFetchEventSource } from "@/utils/request";
import { api } from "@/api/api";

export function useChatManager() {
  const chatHistoryStore = useChatHistoryStore();

  // ËÅäÂ§©Áõ∏ÂÖ≥Áä∂ÊÄÅ
  const chatHistory = ref([]);
  const chatHistoryRef = ref(null);
  const isChatMode = ref(false);
  const isGenerating = ref(false);
  const currentAbortController = ref(null);
  const inputMessage = ref("");

  // ÂèëÈÄÅÊ∂àÊÅØ
  const sendMessage = async (
    userStore,
    isMobileView,
    mobileAdaptation,
    scrollToBottom,
  ) => {
    const message = inputMessage.value.trim();
    if (!message || isGenerating.value) return;

    // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÂà∞ËÅäÂ§©ÂéÜÂè≤
    chatHistory.value.push({
      role: "user",
      content: message,
      timestamp: Date.now(),
    });

    // Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÂπ∂ËøõÂÖ•ËÅäÂ§©Ê®°Âºè
    inputMessage.value = "";
    isChatMode.value = true;

    // ÂàõÂª∫Êñ∞ÁöÑËÅäÂ§©‰ºöËØùÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    let conversationId = chatHistoryStore.currentChatId;
    if (!chatHistoryStore.currentChatId) {
      conversationId = await chatHistoryStore.createNewChat();
    }

    // Ê∑ªÂä†Á©∫ÁöÑAIÊ∂àÊÅØÂç†‰ΩçÁ¨¶Ôºå‰ΩøÁî®isGeneratingÊ†áÂøó
    chatHistory.value.push({
      role: "assistant",
      content: "",
      isGenerating: true,
      timestamp: Date.now(),
    });

    isGenerating.value = true;
    currentAbortController.value = new AbortController();

    try {
      // Ë∞ÉÁî®ÊµÅÂºèAPI
      await authFetchEventSource(
        `${api.devPrefix}${api.chatStreamApi}?conversationId=${conversationId}&userInput=${encodeURIComponent(message)}`,
        {
          method: "GET",
          headers: {
            Accept: "text/event-stream",
            "Cache-Control": "no-cache",
          },
          signal: currentAbortController.value.signal,
          onopen: async (response) => {
            console.log("ÊµÅÂºèËøûÊé•Â∑≤Âª∫Á´ã");
          },
          onmessage: (event) => {
            try {
              const data = event.data;

              if (data.trim().length === 0) {
                return;
              }

              // Êõ¥Êñ∞AIÊ∂àÊÅØÂÜÖÂÆπ
              const lastMessage =
                chatHistory.value[chatHistory.value.length - 1];
              if (lastMessage && lastMessage.role === "assistant") {
                lastMessage.content += data;
                lastMessage.isGenerating = false; // ÂºÄÂßãÊé•Êî∂ÂÜÖÂÆπÊó∂ÂèñÊ∂àÁîüÊàêÁä∂ÊÄÅ

                // ÊªöÂä®Âà∞Â∫ïÈÉ®
                requestAnimationFrame(() => {
                  scrollToBottom();
                });
              }
            } catch (err) {
              console.error("Ëß£ÊûêÊ∂àÊÅØÊó∂Âá∫Èîô:", err);
            }
          },
          onclose: () => {
            console.log("ÊµÅÂºèËøûÊé•Â∑≤ÂÖ≥Èó≠");
            isGenerating.value = false;
            currentAbortController.value = null;
          },
          onerror: (err) => {
            console.error("ÊµÅÂºèËøûÊé•ÈîôËØØ:", err);
            isGenerating.value = false;
            currentAbortController.value = null;

            // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°AIÊ∂àÊÅØÔºåÊ∑ªÂä†ÈîôËØØÊ†áËØÜ
            if (
              chatHistory.value.length > 0 &&
              chatHistory.value[chatHistory.value.length - 1].role ===
                "assistant"
            ) {
              const lastMessage =
                chatHistory.value[chatHistory.value.length - 1];
              if (lastMessage.content) {
                lastMessage.content += "\n\n[ËøûÊé•‰∏≠Êñ≠]";
              } else {
                lastMessage.content = "[ËøûÊé•‰∏≠Êñ≠]";
              }
              lastMessage.isGenerating = false; // ÈîôËØØÊó∂ÂèñÊ∂àÁîüÊàêÁä∂ÊÄÅ
              // Ëß¶ÂèëÂìçÂ∫îÂºèÊõ¥Êñ∞
              chatHistory.value = [...chatHistory.value];
            }

            ElMessage.error("ËøûÊé•‰∏≠Êñ≠ÔºåËØ∑ÈáçËØï");
          },
        },
      );
    } catch (err) {
      console.error("ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:", err);
      isGenerating.value = false;
      currentAbortController.value = null;

      // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°AIÊ∂àÊÅØÔºåÊ∑ªÂä†ÈîôËØØÊ†áËØÜ
      if (
        chatHistory.value.length > 0 &&
        chatHistory.value[chatHistory.value.length - 1].role === "assistant"
      ) {
        const lastMessage = chatHistory.value[chatHistory.value.length - 1];
        if (lastMessage.content) {
          lastMessage.content += "\n\n[ËØ∑Ê±ÇÂ§±Ë¥•]";
        } else {
          lastMessage.content = "[ËØ∑Ê±ÇÂ§±Ë¥•]";
        }
        lastMessage.isGenerating = false; // ÈîôËØØÊó∂ÂèñÊ∂àÁîüÊàêÁä∂ÊÄÅ
        // Ëß¶ÂèëÂìçÂ∫îÂºèÊõ¥Êñ∞
        chatHistory.value = [...chatHistory.value];
      }

      ElMessage.error("ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•ÔºåËØ∑ÈáçËØï");
    }

    // ÁßªÂä®Á´ØÂ§ÑÁêÜ
    if (isMobileView.value) {
      setTimeout(() => {
        mobileAdaptation.fixMobileChatBox(isChatMode.value);
      }, 100);
    }
  };

  // ÂÅúÊ≠¢ÁîüÊàê
  const stopGeneration = () => {
    if (currentAbortController.value) {
      currentAbortController.value.abort();
      currentAbortController.value = null;
    }

    // Êó†ËÆ∫ÊòØÂê¶ÊúâAbortControllerÔºåÂè™Ë¶ÅisGenerating‰∏∫trueÂ∞±ÂèØ‰ª•ÂÅúÊ≠¢
    if (isGenerating.value) {
      // ÈáçÁΩÆÁîüÊàêÁä∂ÊÄÅ
      isGenerating.value = false;

      // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°AIÊ∂àÊÅØÔºåÊ∑ªÂä†ÂÅúÊ≠¢Ê†áËØÜ
      if (
        chatHistory.value.length > 0 &&
        chatHistory.value[chatHistory.value.length - 1].role === "assistant"
      ) {
        const lastMessage = chatHistory.value[chatHistory.value.length - 1];
        if (lastMessage.content && lastMessage.content.trim() !== "") {
          // Â¶ÇÊûúÂ∑≤ÊúâÂÜÖÂÆπÔºåÊ∑ªÂä†ÂÅúÊ≠¢Ê†áËØÜ
          lastMessage.content += "\n\n[Â∑≤ÂÅúÊ≠¢ÁîüÊàê]";
        } else {
          // Â¶ÇÊûúÊ≤°ÊúâÂÜÖÂÆπÔºåËÆæÁΩÆÂÅúÊ≠¢Ê†áËØÜ
          lastMessage.content = "[Â∑≤ÂÅúÊ≠¢ÁîüÊàê]";
        }
        lastMessage.isGenerating = false; // ÂÅúÊ≠¢Êó∂ÂèñÊ∂àÁîüÊàêÁä∂ÊÄÅ
        // Ëß¶ÂèëÂìçÂ∫îÂºèÊõ¥Êñ∞
        chatHistory.value = [...chatHistory.value];
      }

      console.log("üõë ÁîüÊàêÂ∑≤ÂÅúÊ≠¢");
    } else {
      console.log("üõë ÂΩìÂâçÊ≤°ÊúâÊ≠£Âú®ËøõË°åÁöÑÁîüÊàê‰ªªÂä°");
    }
  };

  // ÂàõÂª∫Êñ∞ËÅäÂ§©
  const createNewChat = (isMobileView, mobileAdaptation, scrollToTop) => {
    chatHistory.value = [];
    inputMessage.value = "";
    isChatMode.value = false;
    chatHistoryStore.clearCurrentChat();

    // Á°Æ‰øùÁßªÂä®Á´ØÂ∏ÉÂ±ÄÈáçÁΩÆ
    if (isMobileView.value) {
      nextTick(() => {
        setTimeout(() => {
          mobileAdaptation.resetMobileLayout(isChatMode.value, scrollToTop);
        }, 100);
      });
    }

    ElMessage.success("Â∑≤ÂàõÂª∫Êñ∞ËÅäÂ§©");
  };

  // ÊªöÂä®Âà∞Â∫ïÈÉ®
  const scrollToBottom = () => {
    if (chatHistoryRef.value) {
      nextTick(() => {
        // ‰ΩøÁî®CSSÂéüÁîüsmoothÊªöÂä®ÔºåÊÄßËÉΩÊõ¥Â•Ω
        chatHistoryRef.value.scrollTo({
          top: chatHistoryRef.value.scrollHeight,
          behavior: "smooth",
        });
      });
    }
  };

  // ÊªöÂä®Âà∞È°∂ÈÉ®
  const scrollToTop = () => {
    if (chatHistoryRef.value) {
      chatHistoryRef.value.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    }
  };

  // ÊªöÂä®Â§ÑÁêÜ - ÁÆÄÂåñÁâàÊú¨
  const handleScroll = () => {
    // ÁßªÈô§Â§çÊùÇÁöÑÊªöÂä®Â§ÑÁêÜÈÄªËæëÔºåËÆ©ÊµèËßàÂô®ÂéüÁîüÂ§ÑÁêÜÊªöÂä®ÊÄßËÉΩ‰ºòÂåñ
    // Â¶ÇÊûúÈúÄË¶ÅÁâπÊÆäÂ§ÑÁêÜÔºåÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ÁÆÄÂçïÁöÑÈÄªËæë
  };

  // Êõ¥Êñ∞ËÅäÂ§©ÂéÜÂè≤È´òÂ∫¶
  const updateChatHistoryHeight = () => {
    nextTick(() => {
      if (chatHistoryRef.value) {
        const windowHeight = window.innerHeight;
        const topNavHeight = 60; // TopNavbarÈ´òÂ∫¶
        const inputAreaHeight = 120; // ËæìÂÖ•Âå∫ÂüüÈ´òÂ∫¶
        const availableHeight = windowHeight - topNavHeight - inputAreaHeight;

        chatHistoryRef.value.style.maxHeight = `${availableHeight}px`;
        console.log("ËÅäÂ§©ÂéÜÂè≤Âå∫ÂüüÈ´òÂ∫¶Â∑≤Êõ¥Êñ∞:", availableHeight);
      }
    });
  };

  // ËÅäÂ§©ÂéÜÂè≤Áõ∏ÂÖ≥Êìç‰Ωú
  const handleLoadChat = (chat) => {
    chatHistory.value = chat.messages || [];
    isChatMode.value = chatHistory.value.length > 0;
    chatHistoryStore.setCurrentChat(chat.id);

    nextTick(() => {
      scrollToBottom();
    });
  };

  const handleCreateNewChat = async () => {
    try {
      const chatId = await chatHistoryStore.createNewChat();
      createNewChat();
      console.log("Êñ∞ËÅäÂ§©ÂàõÂª∫ÊàêÂäü:", chatId);
    } catch (error) {
      console.error("ÂàõÂª∫Êñ∞ËÅäÂ§©Â§±Ë¥•:", error);
      ElMessage.error("ÂàõÂª∫Êñ∞ËÅäÂ§©Â§±Ë¥•");
    }
  };

  const handleRenameChat = (chatId, newTitle) => {
    chatHistoryStore.renameChat(chatId, newTitle);
  };

  const handleDeleteChat = (chatId) => {
    chatHistoryStore.deleteChat(chatId);
    if (chatHistoryStore.currentChatId === chatId) {
      createNewChat();
    }
  };

  return {
    // Áä∂ÊÄÅ
    chatHistory,
    chatHistoryRef,
    isChatMode,
    isGenerating,
    inputMessage,

    // ÊñπÊ≥ï
    sendMessage,
    stopGeneration,
    createNewChat,
    scrollToBottom,
    scrollToTop,
    handleScroll,
    updateChatHistoryHeight,
    handleLoadChat,
    handleCreateNewChat,
    handleRenameChat,
    handleDeleteChat,
  };
}
